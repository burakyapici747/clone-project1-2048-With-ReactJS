{"ast":null,"code":"var _jsxFileName = \"/Users/burakyapici/Desktop/clone-project1-2048/src/components/GameBox.js\";\nimport React from \"react\";\nimport GameRow from \"./GameRow\";\nimport GameNumber from \"./GameNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GameBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameMap: this.props.gameStateMap,\n      gameIdMap: [[-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1]],\n      gameNextValue: 0\n    };\n    const self = this;\n    window.addEventListener('keydown', function (e) {\n      if (e.key == \"ArrowRight\") {\n        self.slipToRight();\n      } else if (e.key == \"ArrowLeft\") {\n        self.slipToLeft();\n      } else if (e.key == \"ArrowUp\") {\n        self.slipToTop();\n      } else if (e.key == \"ArrowDown\") {\n        self.slipToBottom();\n      }\n    });\n  }\n\n  slipToTop() {\n    let newArr = this.state.gameMap;\n    let buffer = 0;\n\n    for (let row = this.state.gameMap.length - 1; row >= 0; row--) {\n      buffer = 0;\n\n      for (let col = 0; col <= this.state.gameMap.length - 1; col++) {\n        if (newArr[col][row] != 0) {\n          for (let i = col; i > buffer; i--) {\n            if (newArr[i][row] == newArr[i - 1][row]) {\n              newArr[i - 1][row] = newArr[i - 1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer++;\n              this.setState({\n                gameMap: newArr\n              });\n            } else if (newArr[i][row] != newArr[i - 1][row] && newArr[i - 1][row] != 0) {\n              buffer++;\n            } else {\n              newArr[i - 1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({\n                gameMap: newArr\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.createGridCell(1);\n  }\n\n  slipToBottom() {\n    let newArr = this.state.gameMap;\n    let buffer = 3;\n\n    for (let row = this.state.gameMap.length - 1; row >= 0; row--) {\n      buffer = 3;\n\n      for (let col = this.state.gameMap.length - 1; col >= 0; col--) {\n        if (newArr[col][row] != 0) {\n          for (let i = col; i < buffer; i++) {\n            if (newArr[i][row] == newArr[i + 1][row]) {\n              newArr[i + 1][row] = newArr[i + 1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer--;\n              this.setState({\n                gameMap: newArr\n              });\n            } else if (newArr[i][row] != newArr[i + 1][row] && newArr[i + 1][row] != 0) {\n              buffer--;\n            } else {\n              newArr[i + 1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({\n                gameMap: newArr\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.createGridCell(1);\n  }\n\n  isSameIndex(col, row) {\n    if (this.state.gameMap[col][row] != 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  changeStateMap(value, column, row) {\n    let newArr = [];\n\n    for (let col = 0; col < this.state.gameMap.length; col++) {\n      for (let row = 0; row < this.state.gameMap[col].length; row++) {\n        newArr.push();\n      }\n    }\n\n    this.setState({\n      gameMap: newArr\n    });\n  }\n\n  calculateLocation(col, row) {\n    return [col * 106.25 + (col + 1) * 15, row * 106.25 + (row + 1) * 15];\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBox\",\n      children: this.state.gameMap.map((element, index) => {\n        return /*#__PURE__*/_jsxDEV(GameRow, {\n          id: index,\n          value: element\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*\n\n\n{this.state.gameMap.map(\n          (colValue, colIndex) => {\n            return this.state.gameMap[colIndex].map(\n              (cellValue, cellIndex) => {\n                if(cellValue != 0){\n                  return(\n                    <GameNumber value={cellValue} key={cellIndex} row={colIndex} col={cellIndex} location={this.calculateLocation}/>\n                  );\n                }\n              }\n            )\n          }\n        )}\n\n\n*/","map":{"version":3,"sources":["/Users/burakyapici/Desktop/clone-project1-2048/src/components/GameBox.js"],"names":["React","GameRow","GameNumber","GameBox","Component","constructor","props","state","gameMap","gameStateMap","gameIdMap","gameNextValue","self","window","addEventListener","e","key","slipToRight","slipToLeft","slipToTop","slipToBottom","newArr","buffer","row","length","col","i","setState","createGridCell","isSameIndex","changeStateMap","value","column","push","calculateLocation","render","map","element","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GameRow from \"./GameRow\";\nimport GameNumber from \"./GameNumber\";\nexport default class GameBox extends React.Component{\n\n  constructor(props){\n      super(props);\n      this.state = {\n        gameMap: this.props.gameStateMap,\n        gameIdMap: [\n          [-1, -1, -1, -1],\n          [-1, -1, -1, -1],\n          [-1, -1, -1, -1],\n          [-1, -1, -1, -1],\n        ],\n        gameNextValue: 0,\n      }\n      const self = this;\n      window.addEventListener('keydown', function(e){\n        if(e.key == \"ArrowRight\"){\n          self.slipToRight();\n        }else if(e.key == \"ArrowLeft\"){\n          self.slipToLeft();\n        }else if(e.key == \"ArrowUp\"){\n          self.slipToTop();\n        }else if(e.key == \"ArrowDown\"){\n          self.slipToBottom();\n        }\n      });\n  }\n\n\n\n\n  slipToTop(){\n    let newArr = this.state.gameMap;\n    let buffer = 0;\n    for(let row = this.state.gameMap.length - 1; row >= 0; row--){\n      buffer = 0;\n      for(let col = 0; col <= this.state.gameMap.length -1; col++){\n        if(newArr[col][row] != 0){\n          for(let i = col; i > buffer; i--){\n            if(newArr[i][row] == newArr[i-1][row]){\n              newArr[i - 1][row] = newArr[i -1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer++;\n              this.setState({gameMap: newArr});\n            }else if( ( newArr[i][row] != newArr[i-1][row] ) && ( newArr[i-1][row] != 0 ) ){\n              buffer++;\n            }else{\n              newArr[i-1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({gameMap: newArr});\n            }\n          } \n        }\n      }\n    }\n    this.createGridCell(1);\n  }\n\n  slipToBottom(){\n    let newArr = this.state.gameMap;\n    let buffer = 3;\n    for(let row = this.state.gameMap.length - 1; row >= 0; row--){\n      buffer = 3;\n      for(let col = this.state.gameMap.length-1; col >= 0; col--){\n        if(newArr[col][row] != 0){\n          for(let i = col; i < buffer; i++){\n            if(newArr[i][row] == newArr[i+1][row]){\n              newArr[i + 1][row] = newArr[i +1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer--;\n              this.setState({gameMap: newArr});\n            }else if( ( newArr[i][row] != newArr[i+1][row] ) && ( newArr[i+1][row] != 0 ) ){\n              buffer--;\n            }else{\n              newArr[i+1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({gameMap: newArr});\n            }\n          } \n        }\n      }\n    }\n    this.createGridCell(1);\n  }\n\n  isSameIndex(col, row){\n    if(this.state.gameMap[col][row] != 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n  \n  changeStateMap(value, column, row){\n    let newArr = [];\n    for(let col = 0; col < this.state.gameMap.length; col++){\n        for(let row = 0; row < this.state.gameMap[col].length; row++){\n          newArr.push();\n        }\n    }\n    this.setState({\n      gameMap: newArr,\n    });\n  }\n\n  calculateLocation(col, row){\n    return [((col * 106.25) + (col+1) * 15), ((row * 106.25) + (row+1) * 15)];\n  }\n\n  render(){\n    return(\n      <div className=\"gameBox\">\n        {this.state.gameMap.map(\n          (element, index) => {\n            return(\n                <GameRow key={index} id={index} value={element}/>\n            );\n          }\n        )}\n      </div>\n    );\n  }\n}\n\n\n\n\n\n/*\n\n\n{this.state.gameMap.map(\n          (colValue, colIndex) => {\n            return this.state.gameMap[colIndex].map(\n              (cellValue, cellIndex) => {\n                if(cellValue != 0){\n                  return(\n                    <GameNumber value={cellValue} key={cellIndex} row={colIndex} col={cellIndex} location={this.calculateLocation}/>\n                  );\n                }\n              }\n            )\n          }\n        )}\n\n\n*/"]},"metadata":{},"sourceType":"module"}