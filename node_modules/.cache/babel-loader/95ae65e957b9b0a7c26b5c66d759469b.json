{"ast":null,"code":"var _jsxFileName = \"/Users/burakyapici/Desktop/clone-project1-2048/src/components/GameBox.js\";\nimport React from \"react\";\nimport GameRow from \"./GameRow\";\nimport GameNumber from \"./GameNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GameBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameMap: this.props.gameStateMap\n    };\n    this.createGridCell(2);\n  }\n\n  createGridCell(cellAmount) {\n    let newArr = this.state.gameMap;\n    let randomNumbersArr = [];\n\n    if (this.mapIsEmpty()) {\n      for (let i = 1; i <= cellAmount; i++) {\n        randomNumbersArr = this.createRandomNumber(0, 4);\n        newArr[randomNumbersArr[0][0]][randomNumbersArr[0][1]] = randomNumbersArr[1][0];\n      }\n\n      this.setState({\n        gameMap: newArr\n      });\n    }\n\n    this.addElementToBox();\n  }\n\n  mapIsEmpty() {\n    for (let col = 0; col < this.state.gameMap.length; col++) {\n      for (let row = 0; row < this.state.gameMap[col].length; row++) {\n        if (this.state.gameMap[col][row] == 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  addElementToBox() {}\n\n  createRandomNumber(minValue, maxValue) {\n    let randomCol = 0,\n        randomRow = 0;\n    let randomNumber = [2, 4];\n\n    for (;;) {\n      randomCol = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n      randomRow = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n\n      if (!this.isSameIndex(randomCol, randomRow)) {\n        return [[randomCol, randomRow], [randomNumber[Math.floor(Math.random() * (2 - 0)) + 0]]];\n      }\n    }\n  }\n\n  slipToRight() {\n    let newArr = this.state.gameMap;\n    let buffer = 3;\n\n    for (let col = 0; col < this.state.gameMap.length; col++) {\n      buffer = 3;\n\n      for (let row = 2; row >= 0; row--) {\n        if (newArr[col][row] != 0) {\n          for (let i = row; i < buffer; i++) {\n            if (newArr[col][i] == newArr[col][i + 1]) {\n              newArr[col][i + 1] = newArr[col][i + 1] + newArr[col][i];\n              newArr[col][i] = 0;\n              buffer--;\n            } else if (newArr[col][i] != newArr[col][i + 1] && newArr[col][i + 1] != 0) {\n              buffer--;\n            } else {\n              newArr[col][i + 1] = newArr[col][i];\n              newArr[col][i] = 0;\n            }\n          }\n        }\n      }\n    }\n\n    this.setState({\n      gameMap: newArr\n    });\n    this.createGridCell(1);\n  }\n\n  slipToLeft() {\n    let newArr = this.state.gameMap;\n    let buffer = 0;\n\n    for (let col = 0; col < this.state.gameMap.length; col++) {\n      buffer = 0;\n\n      for (let row = 0; row <= 3; row++) {\n        if (newArr[col][row] != 0) {\n          for (let i = row; i > buffer; i--) {\n            if (newArr[col][i] == newArr[col][i - 1]) {\n              newArr[col][i - 1] = newArr[col][i - 1] + newArr[col][i];\n              newArr[col][i] = 0;\n              buffer++;\n              this.setState({\n                gameMap: newArr\n              });\n            } else if (newArr[col][i] != newArr[col][i - 1] && newArr[col][i - 1] != 0) {\n              buffer++;\n            } else {\n              newArr[col][i - 1] = newArr[col][i];\n              newArr[col][i] = 0;\n              this.setState({\n                gameMap: newArr\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.createGridCell(1);\n  }\n\n  slipToTop() {\n    let newArr = this.state.gameMap;\n    let buffer = 0;\n\n    for (let row = this.state.gameMap.length - 1; row >= 0; row--) {\n      buffer = 0;\n\n      for (let col = 0; col <= this.state.gameMap.length - 1; col++) {\n        if (newArr[col][row] != 0) {\n          for (let i = col; i > buffer; i--) {\n            if (newArr[i][row] == newArr[i - 1][row]) {\n              newArr[i - 1][row] = newArr[i - 1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer++;\n              this.setState({\n                gameMap: newArr\n              });\n            } else if (newArr[i][row] != newArr[i - 1][row] && newArr[i - 1][row] != 0) {\n              buffer++;\n            } else {\n              newArr[i - 1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({\n                gameMap: newArr\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.createGridCell(1);\n  }\n\n  slipToBottom() {\n    let newArr = this.state.gameMap;\n    let buffer = 3;\n\n    for (let row = this.state.gameMap.length - 1; row >= 0; row--) {\n      buffer = 3;\n\n      for (let col = this.state.gameMap.length - 1; col >= 0; col--) {\n        if (newArr[col][row] != 0) {\n          for (let i = col; i < buffer; i++) {\n            if (newArr[i][row] == newArr[i + 1][row]) {\n              newArr[i + 1][row] = newArr[i + 1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer--;\n              this.setState({\n                gameMap: newArr\n              });\n            } else if (newArr[i][row] != newArr[i + 1][row] && newArr[i + 1][row] != 0) {\n              buffer--;\n            } else {\n              newArr[i + 1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({\n                gameMap: newArr\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.createGridCell(1);\n  }\n\n  isSameIndex(col, row) {\n    if (this.state.gameMap[col][row] != 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  changeStateMap(value, column, row) {\n    let newArr = [];\n\n    for (let col = 0; col < this.state.gameMap.length; col++) {\n      for (let row = 0; row < this.state.gameMap[col].length; row++) {\n        newArr.push();\n      }\n    }\n\n    this.setState({\n      gameMap: newArr\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBox\",\n      children: this.state.gameMap.map((element, index) => {\n        return /*#__PURE__*/_jsxDEV(GameRow, {\n          id: index,\n          value: element\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/burakyapici/Desktop/clone-project1-2048/src/components/GameBox.js"],"names":["React","GameRow","GameNumber","GameBox","Component","constructor","props","state","gameMap","gameStateMap","createGridCell","cellAmount","newArr","randomNumbersArr","mapIsEmpty","i","createRandomNumber","setState","addElementToBox","col","length","row","minValue","maxValue","randomCol","randomRow","randomNumber","Math","floor","random","isSameIndex","slipToRight","buffer","slipToLeft","slipToTop","slipToBottom","changeStateMap","value","column","push","render","map","element","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GameRow from \"./GameRow\";\nimport GameNumber from \"./GameNumber\";\nexport default class GameBox extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            gameMap: this.props.gameStateMap,\n        }\n        this.createGridCell(2);\n    }\n\n    createGridCell(cellAmount){\n        let newArr = this.state.gameMap;\n        let randomNumbersArr = [];\n        if(this.mapIsEmpty()){\n          for(let i = 1; i <= cellAmount; i++){\n            randomNumbersArr = this.createRandomNumber(0,4);\n            newArr[randomNumbersArr[0][0]][randomNumbersArr[0][1]] = randomNumbersArr[1][0];\n          }\n          this.setState({gameMap: newArr,});\n        }\n        this.addElementToBox();\n      }\n    \n      mapIsEmpty(){\n        for(let col = 0; col < this.state.gameMap.length; col++){\n          for(let row = 0; row < this.state.gameMap[col].length; row++){\n            if(this.state.gameMap[col][row] == 0){\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n    \n      addElementToBox(){\n          \n      }\n\n      createRandomNumber(minValue, maxValue){\n        let randomCol = 0, randomRow = 0;\n        let randomNumber = [2, 4];\n        for(;;){\n          randomCol = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n          randomRow = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n          if(!this.isSameIndex(randomCol, randomRow)){\n            return [[randomCol, randomRow], [randomNumber[Math.floor(Math.random() * (2 - 0)) + 0]]];\n          }\n        }\n      }\n    \n      slipToRight(){\n        let newArr = this.state.gameMap;\n        let buffer = 3;\n        for(let col = 0; col < this.state.gameMap.length; col++){\n          buffer = 3;\n          for(let row = 2; row >= 0; row--){        \n            if(newArr[col][row] != 0){\n              for(let i = row; i < buffer; i++){\n                if(newArr[col][i] == newArr[col][i + 1]){\n                  newArr[col][i + 1] = newArr[col][i + 1] + newArr[col][i];\n                  newArr[col][i] = 0;\n                  buffer--;\n                }else if( ( newArr[col][i] != newArr[col][i + 1] ) && ( newArr[col][i + 1] != 0 ) ){\n                  buffer--;\n                }else{\n                  newArr[col][i+1] = newArr[col][i];\n                  newArr[col][i] = 0;\n                  \n                }\n              } \n            }\n          }\n        }\n        this.setState({gameMap:newArr});\n        this.createGridCell(1);\n      }\n    \n      slipToLeft(){\n        let newArr = this.state.gameMap;\n        let buffer = 0;\n        for(let col = 0; col < this.state.gameMap.length; col++){\n          buffer = 0;\n          for(let row = 0; row <= 3; row++){        \n            if(newArr[col][row] != 0){\n              for(let i = row; i > buffer; i--){\n                if(newArr[col][i] == newArr[col][i - 1]){\n                  newArr[col][i - 1] = newArr[col][i - 1] + newArr[col][i];\n                  newArr[col][i] = 0;\n                  buffer++;\n                  this.setState({gameMap:newArr});\n                }else if( ( newArr[col][i] != newArr[col][i - 1] ) && ( newArr[col][i - 1] != 0 ) ){\n                  buffer++;\n                }else{\n                  newArr[col][i - 1] = newArr[col][i];\n                  newArr[col][i] = 0;\n                  this.setState({gameMap:newArr});\n                }\n              } \n            }\n          }\n        }\n        this.createGridCell(1);\n      }\n    \n      slipToTop(){\n        let newArr = this.state.gameMap;\n        let buffer = 0;\n        for(let row = this.state.gameMap.length - 1; row >= 0; row--){\n          buffer = 0;\n          for(let col = 0; col <= this.state.gameMap.length -1; col++){\n            if(newArr[col][row] != 0){\n              for(let i = col; i > buffer; i--){\n                if(newArr[i][row] == newArr[i-1][row]){\n                  newArr[i - 1][row] = newArr[i -1][row] + newArr[i][row];\n                  newArr[i][row] = 0;\n                  buffer++;\n                  this.setState({gameMap:newArr});\n                }else if( ( newArr[i][row] != newArr[i-1][row] ) && ( newArr[i-1][row] != 0 ) ){\n                  buffer++;\n                }else{\n                  newArr[i-1][row] = newArr[i][row];\n                  newArr[i][row] = 0;\n                  this.setState({gameMap:newArr});\n                }\n              } \n            }\n          }\n        }\n        this.createGridCell(1);\n      }\n    \n      slipToBottom(){\n        let newArr = this.state.gameMap;\n        let buffer = 3;\n        for(let row = this.state.gameMap.length - 1; row >= 0; row--){\n          buffer = 3;\n          for(let col = this.state.gameMap.length-1; col >= 0; col--){\n            if(newArr[col][row] != 0){\n              for(let i = col; i < buffer; i++){\n                if(newArr[i][row] == newArr[i+1][row]){\n                  newArr[i + 1][row] = newArr[i +1][row] + newArr[i][row];\n                  newArr[i][row] = 0;\n                  buffer--;\n                  this.setState({gameMap:newArr});\n                }else if( ( newArr[i][row] != newArr[i+1][row] ) && ( newArr[i+1][row] != 0 ) ){\n                  buffer--;\n                }else{\n                  newArr[i+1][row] = newArr[i][row];\n                  newArr[i][row] = 0;\n                  this.setState({gameMap:newArr});\n                }\n              } \n            }\n          }\n        }\n        this.createGridCell(1);\n      }\n    \n    \n      isSameIndex(col, row){\n        if(this.state.gameMap[col][row] != 0){\n          return true;\n        }else{\n          return false;\n        }\n      }\n    \n      changeStateMap(value, column, row){\n        let newArr = [];\n        for(let col = 0; col < this.state.gameMap.length; col++){\n            for(let row = 0; row < this.state.gameMap[col].length; row++){\n              newArr.push();\n            }\n        }\n        this.setState({\n          gameMap: newArr,\n        });\n      }\n\n\n\n    render(){\n        return(\n            <div className=\"gameBox\">\n                {this.state.gameMap.map(\n                    (element, index) => {\n                        return(\n                            <GameRow key={index} id={index} value={element}/>\n                        );\n                    }\n                )}\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}