{"ast":null,"code":"var _jsxFileName = \"/Users/burakyapici/Desktop/Projects/clone-project1-2048/src/components/GameBox.js\";\nimport React from \"react\";\nimport GameRow from \"./GameRow\";\nimport GameNumber from \"./GameNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GameBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameMap: [[0, 0, 0, 0], [0, 2, 2, 2], [0, 2, 2, 2], [0, 0, 0, 0]],\n      gameIdMap: [[0, 0, 0, 0], [0, 1, 2, 5], [0, 4, 3, 6], [0, 0, 0, 0]],\n      gameNextValue: 1\n    };\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.removedData = [];\n    console.log(this.state.gameIdMap[0]);\n    console.log(this.state.gameIdMap[1]);\n    console.log(this.state.gameIdMap[2]);\n    console.log(this.state.gameIdMap[3]);\n    console.log(\"------------------------------\");\n  }\n\n  handleKeyDown(event) {\n    if (event.keyCode === 39) {\n      //RightArrow\n      this.slipToRight();\n    } else if (event.keyCode === 38) {\n      //TopArrow\n      this.slipToTop();\n    } else if (event.keyCode === 37) {\n      //LeftArrow\n      this.slipToLeft();\n    } else if (event.keyCode === 40) {\n      //BottomArrow\n      this.slipToBottom();\n    }\n\n    console.log(this.state.gameIdMap[0]);\n    console.log(this.state.gameIdMap[1]);\n    console.log(this.state.gameIdMap[2]);\n    console.log(this.state.gameIdMap[3]);\n    console.log(\"------------------------------\");\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  createBox(amount) {\n    for (let i = 1; i <= amount; i++) {\n      this.createRandomForBoxNumber();\n    }\n  }\n\n  createRandomForBoxNumber() {\n    //Problem yok calisiyor\n    let randomRow = 0,\n        randomCol = 0;\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n\n    while (!this.gameMapIsFull()) {\n      randomRow = Math.floor(Math.random() * this.state.gameMap.length);\n      randomCol = Math.floor(Math.random() * this.state.gameMap[0].length);\n\n      if (this.isThatSlotEmpty(randomRow, randomCol)) {\n        newArrForGameMap[randomRow][randomCol] = this.createRandomForNumber();\n\n        if (this.removedData.length > 0) {\n          newArrForGameIdMap[randomRow][randomCol] = this.removedData.shift();\n        } else {\n          newArrForGameIdMap[randomRow][randomCol] = this.state.gameNextValue++;\n        }\n\n        break;\n      }\n    }\n\n    this.setState({\n      gameMap: newArrForGameMap,\n      gameIdMap: newArrForGameIdMap\n    });\n  }\n\n  gameMapIsFull() {\n    //Problem yok calisiyor\n    for (let row = 0; row < this.state.gameMap.length; row++) {\n      for (let col = 0; col < this.state.gameMap[0].length; col++) {\n        if (this.state.gameMap[row][col] == 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  isThatSlotEmpty(row, col) {\n    //Problem yok calisiyor\n    if (this.state.gameMap[row][col] == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  createRandomForNumber() {\n    let numberOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      numbers: [2, 4],\n      percent: [90, 10]\n    };\n    //Problem yok calisiyor\n    let randomForPercent = Math.floor(Math.random() * (100 - 1)) + 1;\n    let _randomForPercentBuffer = 0;\n\n    for (let i = 0; i < numberOptions.percent.length; i++) {\n      if (randomForPercent >= _randomForPercentBuffer && randomForPercent <= _randomForPercentBuffer + numberOptions.percent[i]) {\n        return numberOptions.numbers[i];\n      }\n\n      _randomForPercentBuffer += numberOptions.percent[i];\n    }\n  }\n\n  calculateLocation(boxId) {\n    //Düzeltmeler yapılacak!!!!!!!!!!!!\n    return [];\n  }\n\n  getValue() {\n    return this.state.gameMap;\n  }\n\n  slipToRight() {\n    let _bufferGameMapArr = this.state.gameMap;\n    let _bufferGameIdMapArr = this.state.gameIdMap;\n    let _currentIndexBuffer = 3;\n\n    for (let row = 0; row < _bufferGameMapArr.length; row++) {\n      _currentIndexBuffer = 3;\n\n      for (let col = _bufferGameMapArr.length - 2; col >= 0; col--) {\n        if (_bufferGameMapArr[row][col] != 0) {\n          for (let bufferIndexNumber = col; bufferIndexNumber < _currentIndexBuffer; bufferIndexNumber++) {\n            if (_bufferGameMapArr[row][bufferIndexNumber] == _bufferGameMapArr[row][bufferIndexNumber + 1]) {\n              //gameMapArr\n              _bufferGameMapArr[row][bufferIndexNumber + 1] = _bufferGameMapArr[row][bufferIndexNumber + 1] + _bufferGameMapArr[row][bufferIndexNumber];\n              _bufferGameMapArr[row][bufferIndexNumber] = 0; //gameIdMapArr\n\n              this.removedData.push(_bufferGameIdMapArr[row][bufferIndexNumber + 1]);\n              _bufferGameIdMapArr[row][bufferIndexNumber + 1] = _bufferGameIdMapArr[row][bufferIndexNumber];\n              _bufferGameIdMapArr[row][bufferIndexNumber] = 0;\n              _currentIndexBuffer--;\n              this.setState({\n                gameMap: _bufferGameMapArr,\n                gameIdMap: _bufferGameIdMapArr\n              });\n            } else if (_bufferGameMapArr[row][bufferIndexNumber] != _bufferGameMapArr[row][bufferIndexNumber + 1] && _bufferGameMapArr[row][bufferIndexNumber + 1] != 0) {\n              _currentIndexBuffer--;\n            } else if (_bufferGameMapArr[row][bufferIndexNumber + 1] == 0) {\n              //gameMapArr\n              _bufferGameMapArr[row][bufferIndexNumber + 1] = _bufferGameMapArr[row][bufferIndexNumber];\n              _bufferGameMapArr[row][bufferIndexNumber] = 0; //gameIdMapArr\n\n              _bufferGameIdMapArr[row][bufferIndexNumber + 1] = _bufferGameIdMapArr[row][bufferIndexNumber];\n              _bufferGameIdMapArr[row][bufferIndexNumber] = 0;\n              this.setState({\n                gameMap: _bufferGameMapArr,\n                gameIdMap: _bufferGameIdMapArr\n              });\n            }\n          }\n        }\n      }\n    } //this.createBox(1);\n\n  }\n\n  slipToLeft() {\n    let _bufferGameMapArr = this.state.gameMap;\n    let _bufferGameIdMapArr = this.state.gameIdMap;\n    let _currentIndexBuffer = 0;\n\n    for (let row = 0; row < _bufferGameMapArr.length; row++) {\n      _currentIndexBuffer = 0;\n\n      for (let col = 1; col < _bufferGameMapArr.length; col++) {\n        if (_bufferGameMapArr[row][col] != 0) {\n          for (let bufferIndexNumber = col; bufferIndexNumber > _currentIndexBuffer; bufferIndexNumber--) {\n            if (_bufferGameMapArr[row][bufferIndexNumber] == _bufferGameMapArr[row][bufferIndexNumber - 1]) {\n              //gameMapArr\n              _bufferGameMapArr[row][bufferIndexNumber - 1] = _bufferGameMapArr[row][bufferIndexNumber - 1] + _bufferGameMapArr[row][bufferIndexNumber];\n              _bufferGameMapArr[row][bufferIndexNumber] = 0; //gameIdMapArr\n\n              this.removedData.push(_bufferGameIdMapArr[row][bufferIndexNumber - 1]);\n              _bufferGameIdMapArr[row][bufferIndexNumber - 1] = _bufferGameIdMapArr[row][bufferIndexNumber];\n              _bufferGameIdMapArr[row][bufferIndexNumber] = 0;\n              _currentIndexBuffer++;\n              this.setState({\n                gameMap: _bufferGameMapArr,\n                gameIdMap: _bufferGameIdMapArr\n              });\n            } else if (_bufferGameMapArr[row][bufferIndexNumber] != _bufferGameMapArr[row][bufferIndexNumber - 1] && _bufferGameMapArr[row][bufferIndexNumber - 1] != 0) {\n              _currentIndexBuffer++;\n            } else if (_bufferGameMapArr[row][bufferIndexNumber - 1] == 0) {\n              //gameMapArr\n              _bufferGameMapArr[row][bufferIndexNumber - 1] = _bufferGameMapArr[row][bufferIndexNumber];\n              _bufferGameMapArr[row][bufferIndexNumber] = 0; //gameIdMapArr\n\n              _bufferGameIdMapArr[row][bufferIndexNumber - 1] = _bufferGameIdMapArr[row][bufferIndexNumber];\n              _bufferGameIdMapArr[row][bufferIndexNumber] = 0;\n              this.setState({\n                gameMap: _bufferGameMapArr,\n                gameIdMap: _bufferGameIdMapArr\n              });\n            }\n          }\n        }\n      }\n    } //this.createBox(1);\n\n  }\n\n  slipToTop() {\n    let _bufferGameMapArr = this.state.gameMap;\n    let _bufferGameIdMapArr = this.state.gameIdMap;\n    let _currentIndexBuffer = 0;\n\n    for (let row = 0; row < _bufferGameMapArr.length; row++) {\n      for (let col = 0; col < _bufferGameMapArr.length; col++) {\n        _currentIndexBuffer = 0;\n\n        if (_bufferGameMapArr[row][col] != 0) {\n          for (let bufferIndexNumber = row; bufferIndexNumber > _currentIndexBuffer; bufferIndexNumber--) {\n            if (_bufferGameMapArr[bufferIndexNumber][col] == _bufferGameMapArr[bufferIndexNumber - 1][col]) {\n              //gameMapArr\n              _bufferGameMapArr[bufferIndexNumber - 1][col] = _bufferGameMapArr[bufferIndexNumber - 1][col] + _bufferGameMapArr[bufferIndexNumber][col];\n              _bufferGameMapArr[bufferIndexNumber][col] = 0; //gameIdMapArr\n\n              this.removedData.push(_bufferGameIdMapArr[bufferIndexNumber - 1][col]);\n              _bufferGameIdMapArr[bufferIndexNumber - 1][col] = _bufferGameIdMapArr[bufferIndexNumber][col];\n              _bufferGameIdMapArr[bufferIndexNumber][col] = 0;\n              _currentIndexBuffer++;\n              this.setState({\n                gameMap: _bufferGameMapArr,\n                gameIdMap: _bufferGameIdMapArr\n              });\n            } else if (_bufferGameMapArr[bufferIndexNumber][col] != _bufferGameMapArr[bufferIndexNumber - 1][col] && _bufferGameMapArr[bufferIndexNumber - 1][col] != 0) {\n              _currentIndexBuffer++;\n            } else if (_bufferGameMapArr[bufferIndexNumber - 1][col] == 0) {\n              //gameMapArr\n              _bufferGameMapArr[bufferIndexNumber - 1][col] = _bufferGameMapArr[bufferIndexNumber][col];\n              _bufferGameMapArr[bufferIndexNumber][col] = 0; //gameIdMapArr\n\n              _bufferGameIdMapArr[bufferIndexNumber - 1][col] = _bufferGameIdMapArr[bufferIndexNumber][col];\n              _bufferGameIdMapArr[bufferIndexNumber][col] = 0;\n              this.setState({\n                gameMap: _bufferGameMapArr,\n                gameIdMap: _bufferGameIdMapArr\n              });\n            }\n          }\n        }\n      }\n    } //this.createBox(1);\n\n  }\n\n  slipToBottom() {\n    let _bufferGameMapArr = this.state.gameMap;\n    let _bufferGameIdMapArr = this.state.gameIdMap;\n    let _currentIndexBuffer = 3;\n\n    for (let row = _bufferGameMapArr.length - 1; row >= 0; row--) {\n      for (let col = 0; col < _bufferGameMapArr.length; col++) {\n        _currentIndexBuffer = 3;\n\n        if (_bufferGameMapArr[row][col] != 0) {\n          for (let bufferIndexNumber = row; bufferIndexNumber < _currentIndexBuffer; bufferIndexNumber++) {\n            if (_bufferGameMapArr[bufferIndexNumber][col] == _bufferGameMapArr[bufferIndexNumber + 1][col]) {\n              //gameMapArr\n              _bufferGameMapArr[bufferIndexNumber + 1][col] = _bufferGameMapArr[bufferIndexNumber + 1][col] + _bufferGameMapArr[bufferIndexNumber][col];\n              _bufferGameMapArr[bufferIndexNumber][col] = 0;\n              this.removedData.push(_bufferGameIdMapArr[bufferIndexNumber + 1][col]);\n              _bufferGameIdMapArr[bufferIndexNumber + 1][col] = _bufferGameIdMapArr[bufferIndexNumber][col];\n              _bufferGameIdMapArr[bufferIndexNumber][col] = 0;\n              _currentIndexBuffer--;\n              this.setState({\n                gameMap: _bufferGameMapArr,\n                gameIdMap: _bufferGameIdMapArr\n              });\n            } else if (_bufferGameMapArr[bufferIndexNumber][col] != _bufferGameMapArr[bufferIndexNumber + 1][col] && _bufferGameMapArr[bufferIndexNumber + 1][col] != 0) {\n              _currentIndexBuffer--;\n            } else if (_bufferGameMapArr[bufferIndexNumber + 1][col] == 0) {\n              //gameMapArr\n              _bufferGameMapArr[bufferIndexNumber + 1][col] = _bufferGameMapArr[bufferIndexNumber][col];\n              _bufferGameMapArr[bufferIndexNumber][col] = 0; //gameIdMapArr\n\n              _bufferGameIdMapArr[bufferIndexNumber + 1][col] = _bufferGameIdMapArr[bufferIndexNumber][col];\n              _bufferGameIdMapArr[bufferIndexNumber][col] = 0;\n              this.setState({\n                gameMap: _bufferGameMapArr,\n                gameIdMap: _bufferGameIdMapArr\n              });\n            }\n          }\n        }\n      }\n    } //this.createBox(1);\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBox\",\n      children: [this.state.gameMap.map((element, index) => {\n        return /*#__PURE__*/_jsxDEV(GameRow, {\n          id: index,\n          value: element\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 15\n        }, this);\n      }), this.state.gameIdMap.map((row, rowKey) => {\n        return row.map((col, colKey) => {\n          if (row[colKey] != 0) {\n            return /*#__PURE__*/_jsxDEV(GameNumber, {\n              id: this.state.gameIdMap[rowKey][colKey],\n              location: this.calculateLocation(this.state.gameIdMap[rowKey][colKey]),\n              val: this.getValue()[rowKey][colKey]\n            }, this.state.gameIdMap[rowKey][colKey], false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 25\n            }, this);\n          }\n        });\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/burakyapici/Desktop/Projects/clone-project1-2048/src/components/GameBox.js"],"names":["React","GameRow","GameNumber","GameBox","Component","constructor","props","state","gameMap","gameIdMap","gameNextValue","handleKeyDown","bind","removedData","console","log","event","keyCode","slipToRight","slipToTop","slipToLeft","slipToBottom","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","createBox","amount","i","createRandomForBoxNumber","randomRow","randomCol","newArrForGameMap","newArrForGameIdMap","gameMapIsFull","Math","floor","random","length","isThatSlotEmpty","createRandomForNumber","shift","setState","row","col","numberOptions","numbers","percent","randomForPercent","_randomForPercentBuffer","calculateLocation","boxId","getValue","_bufferGameMapArr","_bufferGameIdMapArr","_currentIndexBuffer","bufferIndexNumber","push","render","map","element","index","rowKey","colKey"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GameRow from \"./GameRow\";\nimport GameNumber from \"./GameNumber\";\nexport default class GameBox extends React.Component{\n\n  constructor(props){\n      super(props);\n      this.state = {\n        gameMap: [\n          [0, 0, 0, 0],\n          [0, 2, 2, 2],\n          [0, 2, 2, 2],\n          [0, 0, 0, 0],\n        ],\n        gameIdMap: [\n          [0, 0, 0, 0],\n          [0, 1, 2, 5],\n          [0, 4, 3, 6],\n          [0, 0, 0, 0],\n        ],\n        gameNextValue: 1,\n      }\n      this.handleKeyDown = this.handleKeyDown.bind(this);\n      this.removedData = [];\n      console.log(this.state.gameIdMap[0]);\n      console.log(this.state.gameIdMap[1]);\n      console.log(this.state.gameIdMap[2]);\n      console.log(this.state.gameIdMap[3]);\n      console.log(\"------------------------------\");\n  }\n  handleKeyDown(event){\n    if(event.keyCode === 39){//RightArrow\n      this.slipToRight();\n    }else if(event.keyCode === 38){//TopArrow\n      this.slipToTop();\n    }else if(event.keyCode === 37){//LeftArrow\n      this.slipToLeft();\n    }else if(event.keyCode === 40){//BottomArrow\n      this.slipToBottom();\n    }\n\n    console.log(this.state.gameIdMap[0]);\n    console.log(this.state.gameIdMap[1]);\n    console.log(this.state.gameIdMap[2]);\n    console.log(this.state.gameIdMap[3]);\n    console.log(\"------------------------------\");\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  createBox(amount){\n    for(let i = 1; i <= amount; i++){\n      this.createRandomForBoxNumber();\n    }\n  }\n\n  createRandomForBoxNumber(){//Problem yok calisiyor\n    let randomRow = 0, randomCol = 0;\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n    while(!this.gameMapIsFull()){\n      randomRow = Math.floor(Math.random() * this.state.gameMap.length);\n      randomCol = Math.floor(Math.random() * this.state.gameMap[0].length);\n      if(this.isThatSlotEmpty(randomRow, randomCol)){\n        newArrForGameMap[randomRow][randomCol] = this.createRandomForNumber();\n        if(this.removedData.length > 0){\n          newArrForGameIdMap[randomRow][randomCol] = this.removedData.shift();\n        }else{\n          newArrForGameIdMap[randomRow][randomCol] = this.state.gameNextValue++;\n        }\n        break;\n      }\n    }\n    this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n  }\n\n  gameMapIsFull(){//Problem yok calisiyor\n    for(let row = 0; row < this.state.gameMap.length; row++){\n      for(let col = 0; col < this.state.gameMap[0].length; col++){\n        if(this.state.gameMap[row][col] == 0){\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  isThatSlotEmpty(row, col){//Problem yok calisiyor\n    if(this.state.gameMap[row][col] == 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n\n  createRandomForNumber(numberOptions = {numbers: [2, 4], percent: [90, 10]}){//Problem yok calisiyor\n    let randomForPercent = Math.floor(Math.random() * (100 - 1) ) + 1;\n    let _randomForPercentBuffer = 0;\n    for(let i = 0; i < numberOptions.percent.length; i++){\n      if( (randomForPercent >= _randomForPercentBuffer)  && (randomForPercent <= (_randomForPercentBuffer + numberOptions.percent[i])) ){\n        return numberOptions.numbers[i];\n      }\n      _randomForPercentBuffer += numberOptions.percent[i];\n    }\n  }\n\n  calculateLocation(boxId){//Düzeltmeler yapılacak!!!!!!!!!!!!\n    return [];\n  }\n\n  getValue(){\n    return this.state.gameMap\n  }\n\n  slipToRight(){\n    let _bufferGameMapArr = this.state.gameMap;\n    let _bufferGameIdMapArr = this.state.gameIdMap;\n    let _currentIndexBuffer = 3;\n    for(let row = 0; row < _bufferGameMapArr.length; row++){\n      _currentIndexBuffer = 3;\n      for(let col = _bufferGameMapArr.length - 2; col >= 0; col--){\n        if(_bufferGameMapArr[row][col] != 0){\n          for(let bufferIndexNumber = col; bufferIndexNumber < _currentIndexBuffer; bufferIndexNumber++){\n            if(_bufferGameMapArr[row][bufferIndexNumber] == _bufferGameMapArr[row][bufferIndexNumber + 1]){\n              //gameMapArr\n              _bufferGameMapArr[row][bufferIndexNumber + 1] = _bufferGameMapArr[row][bufferIndexNumber + 1] + _bufferGameMapArr[row][bufferIndexNumber];\n              _bufferGameMapArr[row][bufferIndexNumber] = 0;\n              \n              //gameIdMapArr\n              this.removedData.push(_bufferGameIdMapArr[row][bufferIndexNumber + 1]);\n              _bufferGameIdMapArr[row][bufferIndexNumber + 1] = _bufferGameIdMapArr[row][bufferIndexNumber];\n              _bufferGameIdMapArr[row][bufferIndexNumber] = 0;\n\n              _currentIndexBuffer--;\n              this.setState({gameMap: _bufferGameMapArr, gameIdMap: _bufferGameIdMapArr});\n            }else if((_bufferGameMapArr[row][bufferIndexNumber] != _bufferGameMapArr[row][bufferIndexNumber + 1]) && (_bufferGameMapArr[row][bufferIndexNumber + 1] != 0)){\n              _currentIndexBuffer--;\n            }else if( _bufferGameMapArr[row][bufferIndexNumber + 1] == 0){\n              //gameMapArr\n              _bufferGameMapArr[row][bufferIndexNumber + 1] = _bufferGameMapArr[row][bufferIndexNumber];\n              _bufferGameMapArr[row][bufferIndexNumber] = 0;\n              //gameIdMapArr\n              _bufferGameIdMapArr[row][bufferIndexNumber + 1] = _bufferGameIdMapArr[row][bufferIndexNumber];\n              _bufferGameIdMapArr[row][bufferIndexNumber] = 0;\n              this.setState({gameMap: _bufferGameMapArr, gameIdMap: _bufferGameIdMapArr});\n            }\n          }\n        }\n      }\n    }\n    //this.createBox(1);\n  }\n\n  slipToLeft(){\n    let _bufferGameMapArr = this.state.gameMap;\n    let _bufferGameIdMapArr = this.state.gameIdMap;\n    let _currentIndexBuffer = 0;\n    for(let row = 0; row < _bufferGameMapArr.length; row++){\n      _currentIndexBuffer = 0;\n      for(let col = 1; col < _bufferGameMapArr.length; col++){\n        if(_bufferGameMapArr[row][col] != 0){\n          for(let bufferIndexNumber = col; bufferIndexNumber > _currentIndexBuffer; bufferIndexNumber--){\n            if(_bufferGameMapArr[row][bufferIndexNumber] == _bufferGameMapArr[row][bufferIndexNumber - 1]){\n\n              //gameMapArr\n              _bufferGameMapArr[row][bufferIndexNumber - 1] = _bufferGameMapArr[row][bufferIndexNumber - 1] + _bufferGameMapArr[row][bufferIndexNumber];\n              _bufferGameMapArr[row][bufferIndexNumber] = 0;\n              \n              //gameIdMapArr\n              this.removedData.push(_bufferGameIdMapArr[row][bufferIndexNumber - 1]);\n              _bufferGameIdMapArr[row][bufferIndexNumber - 1] = _bufferGameIdMapArr[row][bufferIndexNumber];\n              _bufferGameIdMapArr[row][bufferIndexNumber] = 0;\n\n\n              _currentIndexBuffer++;\n              this.setState({gameMap: _bufferGameMapArr, gameIdMap: _bufferGameIdMapArr});\n            }else if((_bufferGameMapArr[row][bufferIndexNumber] != _bufferGameMapArr[row][bufferIndexNumber - 1]) && (_bufferGameMapArr[row][bufferIndexNumber - 1] != 0)){\n              _currentIndexBuffer++;\n            }else if( _bufferGameMapArr[row][bufferIndexNumber - 1] == 0){\n              //gameMapArr\n              _bufferGameMapArr[row][bufferIndexNumber - 1] = _bufferGameMapArr[row][bufferIndexNumber];\n              _bufferGameMapArr[row][bufferIndexNumber] = 0;\n              //gameIdMapArr\n              _bufferGameIdMapArr[row][bufferIndexNumber - 1] = _bufferGameIdMapArr[row][bufferIndexNumber];\n              _bufferGameIdMapArr[row][bufferIndexNumber] = 0;\n              this.setState({gameMap: _bufferGameMapArr, gameIdMap: _bufferGameIdMapArr});\n            }\n          }\n        }\n      }\n    }\n    //this.createBox(1);\n  }\n\n  slipToTop(){\n    let _bufferGameMapArr = this.state.gameMap;\n    let _bufferGameIdMapArr = this.state.gameIdMap;\n    let _currentIndexBuffer = 0;\n    for(let row = 0; row < _bufferGameMapArr.length; row++){\n      for(let col = 0; col < _bufferGameMapArr.length; col++){\n        _currentIndexBuffer = 0;\n        if(_bufferGameMapArr[row][col] != 0){\n          for(let bufferIndexNumber = row; bufferIndexNumber > _currentIndexBuffer; bufferIndexNumber--){\n            if(_bufferGameMapArr[bufferIndexNumber][col] == _bufferGameMapArr[bufferIndexNumber - 1][col]){\n              //gameMapArr\n              _bufferGameMapArr[bufferIndexNumber - 1][col] = _bufferGameMapArr[bufferIndexNumber - 1][col] + _bufferGameMapArr[bufferIndexNumber][col];\n              _bufferGameMapArr[bufferIndexNumber][col] = 0;\n             \n             \n              //gameIdMapArr\n              this.removedData.push(_bufferGameIdMapArr[bufferIndexNumber - 1][col]);\n              _bufferGameIdMapArr[bufferIndexNumber - 1][col] = _bufferGameIdMapArr[bufferIndexNumber][col];\n              _bufferGameIdMapArr[bufferIndexNumber][col] = 0;\n\n              _currentIndexBuffer++;\n              this.setState({gameMap: _bufferGameMapArr, gameIdMap: _bufferGameIdMapArr});\n            }else if((_bufferGameMapArr[bufferIndexNumber][col] != _bufferGameMapArr[bufferIndexNumber - 1][col]) && (_bufferGameMapArr[bufferIndexNumber - 1][col] != 0)){\n              _currentIndexBuffer++;\n            }else if( _bufferGameMapArr[bufferIndexNumber - 1][col] == 0){\n              //gameMapArr\n              _bufferGameMapArr[bufferIndexNumber - 1][col] = _bufferGameMapArr[bufferIndexNumber][col];\n              _bufferGameMapArr[bufferIndexNumber][col] = 0;\n              //gameIdMapArr\n              _bufferGameIdMapArr[bufferIndexNumber - 1][col] = _bufferGameIdMapArr[bufferIndexNumber][col];\n              _bufferGameIdMapArr[bufferIndexNumber][col] = 0;\n              this.setState({gameMap: _bufferGameMapArr, gameIdMap: _bufferGameIdMapArr});\n            }\n          }\n        }\n      }\n    }\n    //this.createBox(1);\n  }\n\n  slipToBottom(){\n    let _bufferGameMapArr = this.state.gameMap;\n    let _bufferGameIdMapArr = this.state.gameIdMap;\n    let _currentIndexBuffer = 3;\n    for(let row = _bufferGameMapArr.length - 1; row >= 0; row--){\n      for(let col = 0; col < _bufferGameMapArr.length; col++){\n        _currentIndexBuffer = 3;\n        if(_bufferGameMapArr[row][col] != 0){\n          for(let bufferIndexNumber = row; bufferIndexNumber < _currentIndexBuffer; bufferIndexNumber++){\n            if(_bufferGameMapArr[bufferIndexNumber][col] == _bufferGameMapArr[bufferIndexNumber + 1][col]){\n              //gameMapArr\n              _bufferGameMapArr[bufferIndexNumber + 1][col] = _bufferGameMapArr[bufferIndexNumber + 1][col] + _bufferGameMapArr[bufferIndexNumber][col];\n              _bufferGameMapArr[bufferIndexNumber][col] = 0;\n             \n\n              this.removedData.push(_bufferGameIdMapArr[bufferIndexNumber + 1][col]);\n              _bufferGameIdMapArr[bufferIndexNumber + 1][col] = _bufferGameIdMapArr[bufferIndexNumber][col];\n              _bufferGameIdMapArr[bufferIndexNumber][col] = 0;\n\n\n              _currentIndexBuffer--;\n              this.setState({gameMap: _bufferGameMapArr, gameIdMap: _bufferGameIdMapArr});\n            }else if((_bufferGameMapArr[bufferIndexNumber][col] != _bufferGameMapArr[bufferIndexNumber + 1][col]) && (_bufferGameMapArr[bufferIndexNumber + 1][col] != 0)){\n              _currentIndexBuffer--;\n            }else if( _bufferGameMapArr[bufferIndexNumber + 1][col] == 0){\n              //gameMapArr\n              _bufferGameMapArr[bufferIndexNumber + 1][col] = _bufferGameMapArr[bufferIndexNumber][col];\n              _bufferGameMapArr[bufferIndexNumber][col] = 0;\n              //gameIdMapArr\n              _bufferGameIdMapArr[bufferIndexNumber + 1][col] = _bufferGameIdMapArr[bufferIndexNumber][col];\n              _bufferGameIdMapArr[bufferIndexNumber][col] = 0;\n              this.setState({gameMap: _bufferGameMapArr, gameIdMap: _bufferGameIdMapArr});\n            }\n          }\n        }\n      }\n    }\n    //this.createBox(1);\n  }\n\n  render(){\n    return(\n      <div className=\"gameBox\">\n        {this.state.gameMap.map(\n          (element, index) => {\n            return(\n              <GameRow key={index} id={index} value={element}/>\n            );\n          }\n        )}\n        {\n          this.state.gameIdMap.map(            \n            (row, rowKey) => {\n              return(\n                row.map(\n                  (col, colKey) =>{\n                    if(row[colKey] != 0){\n                      return(\n                        <GameNumber key={this.state.gameIdMap[rowKey][colKey]} id={this.state.gameIdMap[rowKey][colKey]} location={this.calculateLocation(this.state.gameIdMap[rowKey][colKey])} val={this.getValue()[rowKey][colKey]}/>\n                      );\n                    }\n                  }\n                )\n              )\n            }\n          )\n        }\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}