{"ast":null,"code":"var _jsxFileName = \"/Users/burakyapici/Desktop/clone-project1-2048/src/components/GameBox.js\";\nimport React from \"react\";\nimport GameRow from \"./GameRow\";\nimport GameNumber from \"./GameNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GameBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameMap: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n      gameIdMap: [[-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1]],\n      gameNextValue: 0\n    };\n    this.createBox(4);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  handleKeyDown(event) {\n    if (event.keyCode === 39) {\n      //RightArrow\n      this.slipToRight();\n    } else if (event.keyCode === 38) {\n      //TopArrow\n      this.slipToTop();\n    } else if (event.keyCode === 37) {\n      //LeftArrow\n      this.slipToLeft();\n    } else if (event.keyCode === 40) {\n      //BottomArrow\n      this.slipToBottom();\n    }\n\n    console.log(this.state.gameIdMap);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  createBox(amount) {\n    for (let i = 1; i <= amount; i++) {\n      this.createRandomForBoxNumber();\n    }\n  }\n\n  createRandomForBoxNumber() {\n    //Problem yok calisiyor\n    let randomRow = 0,\n        randomCol = 0;\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n\n    while (!this.gameMapIsFull()) {\n      randomRow = Math.floor(Math.random() * this.state.gameMap.length);\n      randomCol = Math.floor(Math.random() * this.state.gameMap[0].length);\n\n      if (this.isThatSlotEmpty(randomRow, randomCol)) {\n        newArrForGameMap[randomRow][randomCol] = this.createRandomForNumber();\n        newArrForGameIdMap[randomRow][randomCol] = this.state.gameNextValue++;\n        break;\n      }\n    }\n\n    this.setState({\n      gameMap: newArrForGameMap,\n      gameIdMap: newArrForGameIdMap\n    });\n  }\n\n  gameMapIsFull() {\n    //Problem yok calisiyor\n    for (let row = 0; row < this.state.gameMap.length; row++) {\n      for (let col = 0; col < this.state.gameMap[0].length; col++) {\n        if (this.state.gameMap[row][col] == 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  isThatSlotEmpty(row, col) {\n    //Problem yok calisiyor\n    if (this.state.gameMap[row][col] == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  createRandomForNumber() {\n    let numberOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      numbers: [2, 4],\n      percent: [70, 30]\n    };\n    //Problem yok calisiyor\n    let randomForPercent = Math.floor(Math.random() * (100 - 1)) + 1;\n    let _randomForPercentBuffer = 0;\n\n    for (let i = 0; i < numberOptions.percent.length; i++) {\n      if (randomForPercent >= _randomForPercentBuffer && randomForPercent <= _randomForPercentBuffer + numberOptions.percent[i]) {\n        return numberOptions.numbers[i];\n      }\n\n      _randomForPercentBuffer += numberOptions.percent[i];\n    }\n  }\n\n  calculateLocation(col, row) {\n    //Düzeltmeler yapılacak!!!!!!!!!!!!\n    return [col * 106.25 + (col + 1) * 15, row * 106.25 + (row + 1) * 15];\n  }\n\n  slipToRight() {\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n    let buffer = 3;\n\n    for (let col = 0; col < this.state.gameMap.length; col++) {\n      buffer = 3;\n\n      for (let row = 2; row >= 0; row--) {\n        if (newArrForGameMap[col][row] != 0) {\n          for (let i = row; i < buffer; i++) {\n            if (newArrForGameMap[col][i] == newArrForGameMap[col][i + 1]) {\n              newArrForGameMap[col][i + 1] = newArrForGameMap[col][i + 1] + newArrForGameMap[col][i];\n              newArrForGameMap[col][i] = 0;\n              newArrForGameIdMap[col][i + 1] = newArrForGameIdMap[col][i + 1] + newArrForGameIdMap[col][i];\n              newArrForGameIdMap[col][i] = -1;\n              buffer--;\n              this.setState({\n                gameMap: newArrForGameMap,\n                gameIdMap: newArrForGameIdMap\n              });\n            } else if (newArrForGameMap[col][i] != newArrForGameMap[col][i + 1] && newArrForGameMap[col][i + 1] != 0) {\n              buffer--;\n            } else {\n              newArrForGameMap[col][i + 1] = newArrForGameMap[col][i];\n              newArrForGameMap[col][i] = 0;\n              newArrForGameIdMap[col][i + 1] = newArrForGameIdMap[col][i];\n              newArrForGameIdMap[col][i] = -1;\n              this.setState({\n                gameMap: newArrForGameMap,\n                gameIdMap: newArrForGameIdMap\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.setState({\n      gameMap: newArrForGameMap,\n      gameIdMap: newArrForGameIdMap\n    });\n  }\n\n  slipToLeft() {\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n    let buffer = 0;\n\n    for (let col = 0; col < this.state.gameMap.length; col++) {\n      buffer = 0;\n\n      for (let row = 0; row <= 3; row++) {\n        if (newArrForGameMap[col][row] != 0) {\n          for (let i = row; i > buffer; i--) {\n            if (newArrForGameMap[col][i] == newArrForGameMap[col][i - 1]) {\n              newArrForGameMap[col][i - 1] = newArrForGameMap[col][i - 1] + newArrForGameMap[col][i];\n              newArrForGameMap[col][i] = 0;\n              newArrForGameIdMap[col][i - 1] = newArrForGameIdMap[col][i - 1] + newArrForGameIdMap[col][i];\n              newArrForGameIdMap[col][i] = -1;\n              buffer++;\n              this.setState({\n                gameMap: newArrForGameMap,\n                gameIdMap: newArrForGameIdMap\n              });\n            } else if (newArrForGameMap[col][i] != newArrForGameMap[col][i - 1] && newArrForGameMap[col][i - 1] != 0) {\n              buffer++;\n            } else {\n              newArrForGameMap[col][i - 1] = newArrForGameMap[col][i];\n              newArrForGameMap[col][i] = 0;\n              newArrForGameIdMap[col][i - 1] = newArrForGameIdMap[col][i];\n              newArrForGameIdMap[col][i] = -1;\n              this.setState({\n                gameMap: newArrForGameMap,\n                gameIdMap: newArrForGameIdMap\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.setState({\n      gameMap: newArrForGameMap,\n      gameIdMap: newArrForGameIdMap\n    });\n  }\n\n  slipToTop() {\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n    let buffer = 0;\n\n    for (let row = this.state.gameMap.length - 1; row >= 0; row--) {\n      buffer = 0;\n\n      for (let col = 0; col <= this.state.gameMap.length - 1; col++) {\n        if (newArrForGameMap[col][row] != 0) {\n          for (let i = col; i > buffer; i--) {\n            if (newArrForGameMap[i][row] == newArrForGameMap[i - 1][row]) {\n              newArrForGameMap[i - 1][row] = newArrForGameMap[i - 1][row] + newArrForGameMap[i][row];\n              newArrForGameMap[i][row] = 0;\n              newArrForGameIdMap[i - 1][row] = newArrForGameIdMap[i - 1][row] + newArrForGameIdMap[i][row];\n              newArrForGameIdMap[i][row] = -1;\n              buffer++;\n              this.setState({\n                gameMap: newArrForGameMap,\n                gameIdMap: newArrForGameIdMap\n              });\n            } else if (newArrForGameMap[i][row] != newArrForGameMap[i - 1][row] && newArrForGameMap[i - 1][row] != 0) {\n              buffer++;\n            } else {\n              newArrForGameMap[i - 1][row] = newArrForGameMap[i][row];\n              newArrForGameIdMap[i - 1][row] = newArrForGameIdMap[i][row];\n              newArrForGameMap[i][row] = 0;\n              newArrForGameIdMap[i][row] = 0;\n              this.setState({\n                gameMap: newArrForGameMap,\n                gameIdMap: newArrForGameIdMap\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.setState({\n      gameMap: newArrForGameMap,\n      gameIdMap: newArrForGameIdMap\n    });\n  }\n\n  slipToBottom() {\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n    let buffer = 3;\n\n    for (let row = this.state.gameMap.length - 1; row >= 0; row--) {\n      buffer = 3;\n\n      for (let col = this.state.gameMap.length - 1; col >= 0; col--) {\n        if (newArrForGameMap[col][row] != 0) {\n          for (let i = col; i < buffer; i++) {\n            if (newArrForGameMap[i][row] == newArrForGameMap[i + 1][row]) {\n              newArrForGameMap[i + 1][row] = newArrForGameMap[i + 1][row] + newArrForGameMap[i][row];\n              newArrForGameMap[i][row] = 0;\n              newArrForGameIdMap[i + 1][row] = newArrForGameIdMap[i + 1][row] + newArrForGameIdMap[i][row];\n              newArrForGameIdMap[i][row] = -1;\n              buffer--;\n              this.setState({\n                gameMap: newArrForGameMap,\n                gameIdMap: newArrForGameIdMap\n              });\n            } else if (newArrForGameMap[i][row] != newArrForGameMap[i + 1][row] && newArrForGameMap[i + 1][row] != 0) {\n              buffer--;\n            } else {\n              newArrForGameMap[i + 1][row] = newArrForGameMap[i][row];\n              newArrForGameMap[i][row] = 0;\n              newArrForGameIdMap[i + 1][row] = newArrForGameIdMap[i][row];\n              newArrForGameIdMap[i][row] = -1;\n              this.setState({\n                gameMap: newArrForGameMap,\n                gameIdMap: newArrForGameIdMap\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.setState({\n      gameMap: newArrForGameMap,\n      gameIdMap: newArrForGameIdMap\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBox\",\n      children: this.state.gameMap.map((element, index) => {\n        return /*#__PURE__*/_jsxDEV(GameRow, {\n          id: index,\n          value: element\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*\n{this.state.gameMap.map(\n  (colValue, colIndex) => {\n    return this.state.gameMap[colIndex].map(\n      (cellValue, cellIndex) => {\n        if(cellValue != 0){\n          return(\n            <GameNumber value={cellValue} key={cellIndex} row={colIndex} col={cellIndex} location={this.calculateLocation}/>\n          );\n        }\n      }\n    )\n  }\n)}\n*/","map":{"version":3,"sources":["/Users/burakyapici/Desktop/clone-project1-2048/src/components/GameBox.js"],"names":["React","GameRow","GameNumber","GameBox","Component","constructor","props","state","gameMap","gameIdMap","gameNextValue","createBox","handleKeyDown","bind","event","keyCode","slipToRight","slipToTop","slipToLeft","slipToBottom","console","log","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","amount","i","createRandomForBoxNumber","randomRow","randomCol","newArrForGameMap","newArrForGameIdMap","gameMapIsFull","Math","floor","random","length","isThatSlotEmpty","createRandomForNumber","setState","row","col","numberOptions","numbers","percent","randomForPercent","_randomForPercentBuffer","calculateLocation","buffer","render","map","element","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GameRow from \"./GameRow\";\nimport GameNumber from \"./GameNumber\";\nexport default class GameBox extends React.Component{\n\n  constructor(props){\n      super(props);\n      this.state = {\n        gameMap: [\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n        ],\n        gameIdMap: [\n          [-1, -1, -1, -1],\n          [-1, -1, -1, -1],\n          [-1, -1, -1, -1],\n          [-1, -1, -1, -1],\n        ],\n        gameNextValue: 0,\n      }\n      this.createBox(4);\n      this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n  \n  handleKeyDown(event){\n    if(event.keyCode === 39){//RightArrow\n      this.slipToRight();\n    }else if(event.keyCode === 38){//TopArrow\n      this.slipToTop();\n    }else if(event.keyCode === 37){//LeftArrow\n      this.slipToLeft();\n    }else if(event.keyCode === 40){//BottomArrow\n      this.slipToBottom();\n    }\n    console.log(this.state.gameIdMap);\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  createBox(amount){\n    for(let i = 1; i <= amount; i++){\n      this.createRandomForBoxNumber();\n    }\n  }\n\n  createRandomForBoxNumber(){//Problem yok calisiyor\n    let randomRow = 0, randomCol = 0;\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n    while(!this.gameMapIsFull()){\n      randomRow = Math.floor(Math.random() * this.state.gameMap.length);\n      randomCol = Math.floor(Math.random() * this.state.gameMap[0].length);\n      if(this.isThatSlotEmpty(randomRow, randomCol)){\n        newArrForGameMap[randomRow][randomCol] = this.createRandomForNumber();\n        newArrForGameIdMap[randomRow][randomCol] = this.state.gameNextValue++;\n        break;\n      }\n    }\n    this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n  }\n\n  gameMapIsFull(){//Problem yok calisiyor\n    for(let row = 0; row < this.state.gameMap.length; row++){\n      for(let col = 0; col < this.state.gameMap[0].length; col++){\n        if(this.state.gameMap[row][col] == 0){\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  isThatSlotEmpty(row, col){//Problem yok calisiyor\n    if(this.state.gameMap[row][col] == 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n\n  createRandomForNumber(numberOptions = {numbers: [2, 4], percent: [70, 30]}){//Problem yok calisiyor\n    let randomForPercent = Math.floor(Math.random() * (100 - 1) ) + 1;\n    let _randomForPercentBuffer = 0;\n    for(let i = 0; i < numberOptions.percent.length; i++){\n      if( (randomForPercent >= _randomForPercentBuffer)  && (randomForPercent <= (_randomForPercentBuffer + numberOptions.percent[i])) ){\n        return numberOptions.numbers[i];\n      }\n      _randomForPercentBuffer += numberOptions.percent[i];\n    }\n  }\n\n  calculateLocation(col, row){//Düzeltmeler yapılacak!!!!!!!!!!!!\n    return [((col * 106.25) + (col+1) * 15), ((row * 106.25) + (row+1) * 15)];\n  }\n\n  slipToRight(){\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n    let buffer = 3;\n    for(let col = 0; col < this.state.gameMap.length; col++){\n      buffer = 3;\n      for(let row = 2; row >= 0; row--){        \n        if(newArrForGameMap[col][row] != 0){\n          for(let i = row; i < buffer; i++){\n            if(newArrForGameMap[col][i] == newArrForGameMap[col][i + 1]){\n              newArrForGameMap[col][i + 1] = newArrForGameMap[col][i + 1] + newArrForGameMap[col][i];\n              newArrForGameMap[col][i] = 0;\n              newArrForGameIdMap[col][i + 1] = newArrForGameIdMap[col][i + 1] + newArrForGameIdMap[col][i];\n              newArrForGameIdMap[col][i] = -1;\n              buffer--;\n              this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n            }else if( ( newArrForGameMap[col][i] != newArrForGameMap[col][i + 1] ) && ( newArrForGameMap[col][i + 1] != 0 ) ){\n              buffer--;\n            }else{\n              newArrForGameMap[col][i+1] = newArrForGameMap[col][i];\n              newArrForGameMap[col][i] = 0; \n              newArrForGameIdMap[col][i+1] = newArrForGameIdMap[col][i];\n              newArrForGameIdMap[col][i] = -1;\n              this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n            }\n          } \n        }\n      }\n    }\n    this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n  }\n\n  slipToLeft(){\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n    let buffer = 0;\n    for(let col = 0; col < this.state.gameMap.length; col++){\n      buffer = 0;\n      for(let row = 0; row <= 3; row++){\n        if(newArrForGameMap[col][row] != 0){\n          for(let i = row; i > buffer; i--){\n            if(newArrForGameMap[col][i] == newArrForGameMap[col][i - 1]){\n              newArrForGameMap[col][i - 1] = newArrForGameMap[col][i - 1] + newArrForGameMap[col][i];\n              newArrForGameMap[col][i] = 0;\n              newArrForGameIdMap[col][i - 1] = newArrForGameIdMap[col][i - 1] + newArrForGameIdMap[col][i];\n              newArrForGameIdMap[col][i] = -1;\n              buffer++;\n              this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n            }else if( ( newArrForGameMap[col][i] != newArrForGameMap[col][i - 1] ) && ( newArrForGameMap[col][i - 1] != 0 ) ){\n              buffer++;\n            }else{\n              newArrForGameMap[col][i - 1] = newArrForGameMap[col][i];\n              newArrForGameMap[col][i] = 0;\n              newArrForGameIdMap[col][i - 1] = newArrForGameIdMap[col][i];\n              newArrForGameIdMap[col][i] = -1;\n              this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n            }\n          } \n        }\n      }\n    }\n    this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n  }\n\n  slipToTop(){\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n    let buffer = 0;\n    for(let row = this.state.gameMap.length - 1; row >= 0; row--){\n      buffer = 0;\n      for(let col = 0; col <= this.state.gameMap.length -1; col++){\n        if(newArrForGameMap[col][row] != 0){\n          for(let i = col; i > buffer; i--){\n            if(newArrForGameMap[i][row] == newArrForGameMap[i-1][row]){\n              newArrForGameMap[i - 1][row] = newArrForGameMap[i -1][row] + newArrForGameMap[i][row];\n              newArrForGameMap[i][row] = 0;\n              newArrForGameIdMap[i - 1][row] = newArrForGameIdMap[i -1][row] + newArrForGameIdMap[i][row];\n              newArrForGameIdMap[i][row] = -1;\n              buffer++;\n              this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n            }else if( ( newArrForGameMap[i][row] != newArrForGameMap[i-1][row] ) && ( newArrForGameMap[i-1][row] != 0 ) ){\n              buffer++;\n            }else{\n              newArrForGameMap[i-1][row] = newArrForGameMap[i][row];\n              newArrForGameIdMap[i-1][row] = newArrForGameIdMap[i][row];\n              newArrForGameMap[i][row] = 0;\n              newArrForGameIdMap[i][row] = 0;\n              this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n            }\n          } \n        }\n      }\n    }\n    this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n  }\n\n  slipToBottom(){\n    let newArrForGameMap = this.state.gameMap;\n    let newArrForGameIdMap = this.state.gameIdMap;\n    let buffer = 3;\n    for(let row = this.state.gameMap.length - 1; row >= 0; row--){\n      buffer = 3;\n      for(let col = this.state.gameMap.length-1; col >= 0; col--){\n        if(newArrForGameMap[col][row] != 0){\n          for(let i = col; i < buffer; i++){\n            if(newArrForGameMap[i][row] == newArrForGameMap[i+1][row]){\n              newArrForGameMap[i + 1][row] = newArrForGameMap[i +1][row] + newArrForGameMap[i][row];\n              newArrForGameMap[i][row] = 0;\n              \n              newArrForGameIdMap[i + 1][row] = newArrForGameIdMap[i +1][row] + newArrForGameIdMap[i][row];\n              newArrForGameIdMap[i][row] = -1;\n              buffer--;\n              this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n            }else if( ( newArrForGameMap[i][row] != newArrForGameMap[i+1][row] ) && ( newArrForGameMap[i+1][row] != 0 ) ){\n              buffer--;\n            }else{\n              newArrForGameMap[i+1][row] = newArrForGameMap[i][row];\n              newArrForGameMap[i][row] = 0;\n\n              newArrForGameIdMap[i+1][row] = newArrForGameIdMap[i][row];\n              newArrForGameIdMap[i][row] = -1;\n              this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n            }\n          } \n        }\n      }\n    }\n    this.setState({gameMap: newArrForGameMap, gameIdMap: newArrForGameIdMap});\n  }\n\n  render(){\n    return(\n      <div className=\"gameBox\">\n        {this.state.gameMap.map(\n          (element, index) => {\n            return(\n              <GameRow key={index} id={index} value={element}/>\n            );\n          }\n        )}\n      </div>\n    );\n  }\n}\n/*\n{this.state.gameMap.map(\n  (colValue, colIndex) => {\n    return this.state.gameMap[colIndex].map(\n      (cellValue, cellIndex) => {\n        if(cellValue != 0){\n          return(\n            <GameNumber value={cellValue} key={cellIndex} row={colIndex} col={cellIndex} location={this.calculateLocation}/>\n          );\n        }\n      }\n    )\n  }\n)}\n*/"]},"metadata":{},"sourceType":"module"}