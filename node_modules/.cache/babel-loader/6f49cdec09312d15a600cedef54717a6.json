{"ast":null,"code":"var _jsxFileName = \"/Users/burakyapici/Desktop/clone-project1-2048/src/components/GameBox.js\";\nimport React from \"react\";\nimport GameRow from \"./GameRow\";\nimport GameNumber from \"./GameNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GameBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameMap: this.props.gameStateMap\n    };\n    const self = this;\n    window.addEventListener('keydown', function (e) {\n      if (e.key == \"ArrowRight\") {\n        self.slipToRight();\n      } else if (e.key == \"ArrowLeft\") {\n        self.slipToLeft();\n      } else if (e.key == \"ArrowUp\") {\n        self.slipToTop();\n      } else if (e.key == \"ArrowDown\") {\n        self.slipToBottom();\n      }\n    });\n    this.createGridCell(1);\n  }\n\n  createGridCell(cellAmount) {\n    let newArr = this.state.gameMap;\n    let randomNumbersArr = [];\n\n    if (this.mapIsEmpty()) {\n      for (let i = 1; i <= cellAmount; i++) {\n        randomNumbersArr = this.createRandomNumber(0, 4);\n        newArr[randomNumbersArr[0][0]][randomNumbersArr[0][1]] = randomNumbersArr[1][0];\n      }\n\n      this.setState({\n        gameMap: newArr\n      });\n    }\n  }\n\n  mapIsEmpty() {\n    for (let col = 0; col < this.state.gameMap.length; col++) {\n      for (let row = 0; row < this.state.gameMap[col].length; row++) {\n        if (this.state.gameMap[col][row] == 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  createRandomNumber(minValue, maxValue) {\n    let randomCol = 0,\n        randomRow = 0;\n    let randomNumber = [2, 4];\n\n    for (;;) {\n      randomCol = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n      randomRow = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n\n      if (!this.isSameIndex(randomCol, randomRow)) {\n        return [[randomCol, randomRow], [randomNumber[Math.floor(Math.random() * (2 - 0)) + 0]]];\n      }\n    }\n  }\n\n  slipToRight() {\n    let newArr = this.state.gameMap;\n    let buffer = 3;\n\n    for (let col = 0; col < this.state.gameMap.length; col++) {\n      buffer = 3;\n\n      for (let row = 2; row >= 0; row--) {\n        if (newArr[col][row] != 0) {\n          for (let i = row; i < buffer; i++) {\n            if (newArr[col][i] == newArr[col][i + 1]) {\n              newArr[col][i + 1] = newArr[col][i + 1] + newArr[col][i];\n              newArr[col][i] = 0;\n              buffer--;\n            } else if (newArr[col][i] != newArr[col][i + 1] && newArr[col][i + 1] != 0) {\n              buffer--;\n            } else {\n              newArr[col][i + 1] = newArr[col][i];\n              newArr[col][i] = 0;\n            }\n          }\n        }\n      }\n    }\n\n    this.setState({\n      gameMap: newArr\n    });\n  }\n\n  slipToLeft() {\n    let newArr = this.state.gameMap;\n    let buffer = 0;\n\n    for (let col = 0; col < this.state.gameMap.length; col++) {\n      buffer = 0;\n\n      for (let row = 0; row <= 3; row++) {\n        if (newArr[col][row] != 0) {\n          for (let i = row; i > buffer; i--) {\n            if (newArr[col][i] == newArr[col][i - 1]) {\n              newArr[col][i - 1] = newArr[col][i - 1] + newArr[col][i];\n              newArr[col][i] = 0;\n              buffer++;\n              this.setState({\n                gameMap: newArr\n              });\n            } else if (newArr[col][i] != newArr[col][i - 1] && newArr[col][i - 1] != 0) {\n              buffer++;\n            } else {\n              newArr[col][i - 1] = newArr[col][i];\n              newArr[col][i] = 0;\n              this.setState({\n                gameMap: newArr\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  slipToTop() {\n    let newArr = this.state.gameMap;\n    let buffer = 0;\n\n    for (let row = this.state.gameMap.length - 1; row >= 0; row--) {\n      buffer = 0;\n\n      for (let col = 0; col <= this.state.gameMap.length - 1; col++) {\n        if (newArr[col][row] != 0) {\n          for (let i = col; i > buffer; i--) {\n            if (newArr[i][row] == newArr[i - 1][row]) {\n              newArr[i - 1][row] = newArr[i - 1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer++;\n              this.setState({\n                gameMap: newArr\n              });\n            } else if (newArr[i][row] != newArr[i - 1][row] && newArr[i - 1][row] != 0) {\n              buffer++;\n            } else {\n              newArr[i - 1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({\n                gameMap: newArr\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  slipToBottom() {\n    let newArr = this.state.gameMap;\n    let buffer = 3;\n\n    for (let row = this.state.gameMap.length - 1; row >= 0; row--) {\n      buffer = 3;\n\n      for (let col = this.state.gameMap.length - 1; col >= 0; col--) {\n        if (newArr[col][row] != 0) {\n          for (let i = col; i < buffer; i++) {\n            if (newArr[i][row] == newArr[i + 1][row]) {\n              newArr[i + 1][row] = newArr[i + 1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer--;\n              this.setState({\n                gameMap: newArr\n              });\n            } else if (newArr[i][row] != newArr[i + 1][row] && newArr[i + 1][row] != 0) {\n              buffer--;\n            } else {\n              newArr[i + 1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({\n                gameMap: newArr\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  isSameIndex(col, row) {\n    if (this.state.gameMap[col][row] != 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  changeStateMap(value, column, row) {\n    let newArr = [];\n\n    for (let col = 0; col < this.state.gameMap.length; col++) {\n      for (let row = 0; row < this.state.gameMap[col].length; row++) {\n        newArr.push();\n      }\n    }\n\n    this.setState({\n      gameMap: newArr\n    });\n  }\n\n  calculateLocation(col, row) {\n    return [col * 106.25 + (col + 1) * 15, row * 106.25 + (row + 1) * 15];\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBox\",\n      children: [this.state.gameMap.map((element, index) => {\n        return /*#__PURE__*/_jsxDEV(GameRow, {\n          id: index,\n          value: element\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }, this);\n      }), this.state.gameMap.map((colValue, colIndex) => {\n        return this.state.gameMap[colIndex].map((cellValue, cellIndex) => {\n          if (cellValue != 0) {\n            return /*#__PURE__*/_jsxDEV(GameNumber, {\n              value: cellValue,\n              row: colIndex,\n              col: cellIndex,\n              location: this.calculateLocation\n            }, cellIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 21\n            }, this);\n          }\n        });\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/burakyapici/Desktop/clone-project1-2048/src/components/GameBox.js"],"names":["React","GameRow","GameNumber","GameBox","Component","constructor","props","state","gameMap","gameStateMap","self","window","addEventListener","e","key","slipToRight","slipToLeft","slipToTop","slipToBottom","createGridCell","cellAmount","newArr","randomNumbersArr","mapIsEmpty","i","createRandomNumber","setState","col","length","row","minValue","maxValue","randomCol","randomRow","randomNumber","Math","floor","random","isSameIndex","buffer","changeStateMap","value","column","push","calculateLocation","render","map","element","index","colValue","colIndex","cellValue","cellIndex"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GameRow from \"./GameRow\";\nimport GameNumber from \"./GameNumber\";\nexport default class GameBox extends React.Component{\n\n  constructor(props){\n      super(props);\n      this.state = {\n          gameMap: this.props.gameStateMap,\n      }\n      const self = this;\n      window.addEventListener('keydown', function(e){\n        if(e.key == \"ArrowRight\"){\n          self.slipToRight();\n        }else if(e.key == \"ArrowLeft\"){\n          self.slipToLeft();\n        }else if(e.key == \"ArrowUp\"){\n          self.slipToTop();\n        }else if(e.key == \"ArrowDown\"){\n          self.slipToBottom();\n        }\n      });\n      this.createGridCell(1);\n  }\n\n  createGridCell(cellAmount){\n      let newArr = this.state.gameMap;\n      let randomNumbersArr = [];\n      if(this.mapIsEmpty()){\n        for(let i = 1; i <= cellAmount; i++){\n          randomNumbersArr = this.createRandomNumber(0,4);\n          newArr[randomNumbersArr[0][0]][randomNumbersArr[0][1]] = randomNumbersArr[1][0];\n        }\n        this.setState({gameMap: newArr,});\n      }\n    }\n  \n  mapIsEmpty(){\n    for(let col = 0; col < this.state.gameMap.length; col++){\n      for(let row = 0; row < this.state.gameMap[col].length; row++){\n        if(this.state.gameMap[col][row] == 0){\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  createRandomNumber(minValue, maxValue){\n    let randomCol = 0, randomRow = 0;\n    let randomNumber = [2, 4];\n    for(;;){\n      randomCol = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n      randomRow = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n      if(!this.isSameIndex(randomCol, randomRow)){\n        return [[randomCol, randomRow], [randomNumber[Math.floor(Math.random() * (2 - 0)) + 0]]];\n      }\n    }\n  }\n\n  slipToRight(){\n    let newArr = this.state.gameMap;\n    let buffer = 3;\n    for(let col = 0; col < this.state.gameMap.length; col++){\n      buffer = 3;\n      for(let row = 2; row >= 0; row--){        \n        if(newArr[col][row] != 0){\n          for(let i = row; i < buffer; i++){\n            if(newArr[col][i] == newArr[col][i + 1]){\n              newArr[col][i + 1] = newArr[col][i + 1] + newArr[col][i];\n              newArr[col][i] = 0;\n              buffer--;\n            }else if( ( newArr[col][i] != newArr[col][i + 1] ) && ( newArr[col][i + 1] != 0 ) ){\n              buffer--;\n            }else{\n              newArr[col][i+1] = newArr[col][i];\n              newArr[col][i] = 0;\n              \n            }\n          } \n        }\n      }\n    }\n    this.setState({gameMap:newArr});\n  }\n\n  slipToLeft(){\n    let newArr = this.state.gameMap;\n    let buffer = 0;\n    for(let col = 0; col < this.state.gameMap.length; col++){\n      buffer = 0;\n      for(let row = 0; row <= 3; row++){        \n        if(newArr[col][row] != 0){\n          for(let i = row; i > buffer; i--){\n            if(newArr[col][i] == newArr[col][i - 1]){\n              newArr[col][i - 1] = newArr[col][i - 1] + newArr[col][i];\n              newArr[col][i] = 0;\n              buffer++;\n              this.setState({gameMap:newArr});\n            }else if( ( newArr[col][i] != newArr[col][i - 1] ) && ( newArr[col][i - 1] != 0 ) ){\n              buffer++;\n            }else{\n              newArr[col][i - 1] = newArr[col][i];\n              newArr[col][i] = 0;\n              this.setState({gameMap:newArr});\n            }\n          } \n        }\n      }\n    }\n  }\n\n  slipToTop(){\n    let newArr = this.state.gameMap;\n    let buffer = 0;\n    for(let row = this.state.gameMap.length - 1; row >= 0; row--){\n      buffer = 0;\n      for(let col = 0; col <= this.state.gameMap.length -1; col++){\n        if(newArr[col][row] != 0){\n          for(let i = col; i > buffer; i--){\n            if(newArr[i][row] == newArr[i-1][row]){\n              newArr[i - 1][row] = newArr[i -1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer++;\n              this.setState({gameMap:newArr});\n            }else if( ( newArr[i][row] != newArr[i-1][row] ) && ( newArr[i-1][row] != 0 ) ){\n              buffer++;\n            }else{\n              newArr[i-1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({gameMap:newArr});\n            }\n          } \n        }\n      }\n    }\n  }\n\n  slipToBottom(){\n    let newArr = this.state.gameMap;\n    let buffer = 3;\n    for(let row = this.state.gameMap.length - 1; row >= 0; row--){\n      buffer = 3;\n      for(let col = this.state.gameMap.length-1; col >= 0; col--){\n        if(newArr[col][row] != 0){\n          for(let i = col; i < buffer; i++){\n            if(newArr[i][row] == newArr[i+1][row]){\n              newArr[i + 1][row] = newArr[i +1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer--;\n              this.setState({gameMap:newArr});\n            }else if( ( newArr[i][row] != newArr[i+1][row] ) && ( newArr[i+1][row] != 0 ) ){\n              buffer--;\n            }else{\n              newArr[i+1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({gameMap:newArr});\n            }\n          } \n        }\n      }\n    }\n  }\n\n  isSameIndex(col, row){\n    if(this.state.gameMap[col][row] != 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n  \n  changeStateMap(value, column, row){\n    let newArr = [];\n    for(let col = 0; col < this.state.gameMap.length; col++){\n        for(let row = 0; row < this.state.gameMap[col].length; row++){\n          newArr.push();\n        }\n    }\n    this.setState({\n      gameMap: newArr,\n    });\n  }\n\n  calculateLocation(col, row){\n    return [((col * 106.25) + (col+1) * 15), ((row * 106.25) + (row+1) * 15)];\n  }\n\n  render(){\n    return(\n      <div className=\"gameBox\">\n        {this.state.gameMap.map(\n          (element, index) => {\n            return(\n                <GameRow key={index} id={index} value={element}/>\n            );\n          }\n        )}\n        {this.state.gameMap.map(\n          (colValue, colIndex) => {\n            return this.state.gameMap[colIndex].map(\n              (cellValue, cellIndex) => {\n                if(cellValue != 0){\n                  return(\n                    <GameNumber value={cellValue} key={cellIndex} row={colIndex} col={cellIndex} location={this.calculateLocation}/>\n                  );\n                }\n              }\n            )\n          }\n        )}\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}