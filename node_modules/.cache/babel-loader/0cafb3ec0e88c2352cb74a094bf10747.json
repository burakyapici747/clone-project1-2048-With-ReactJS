{"ast":null,"code":"var _jsxFileName = \"/Users/burakyapici/Desktop/clone-project1-2048/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport 'animate.css';\nimport GridRow from './components/GridRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      gridStateMap: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    };\n    this.createGridCell(2);\n    const self = this;\n    window.addEventListener('keydown', function (e) {\n      if (e.key == \"ArrowRight\") {\n        self.slipToRight();\n        console.log(\"hello\");\n      } else if (e.key == \"ArrowLeft\") {\n        self.slipToLeft();\n      } else if (e.key == \"ArrowUp\") {\n        self.slipToTop();\n      } else if (e.key == \"ArrowDown\") {\n        self.slipToBottom();\n      }\n    });\n  }\n\n  createGridCell(cellAmount) {\n    let newArr = this.state.gridStateMap;\n    let randomNumbersArr = [];\n\n    if (this.mapIsEmpty()) {\n      for (let i = 1; i <= cellAmount; i++) {\n        randomNumbersArr = this.createRandomNumber(0, 4);\n        newArr[randomNumbersArr[0][0]][randomNumbersArr[0][1]] = randomNumbersArr[1][0];\n      }\n\n      this.setState({\n        gridStateMap: newArr\n      });\n    }\n  }\n\n  mapIsEmpty() {\n    for (let col = 0; col < this.state.gridStateMap.length; col++) {\n      for (let row = 0; row < this.state.gridStateMap[col].length; row++) {\n        if (this.state.gridStateMap[col][row] == 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  createRandomNumber(minValue, maxValue) {\n    let randomCol = 0,\n        randomRow = 0;\n    let randomNumber = [2, 4];\n\n    for (;;) {\n      randomCol = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n      randomRow = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n\n      if (!this.isSameIndex(randomCol, randomRow)) {\n        return [[randomCol, randomRow], [randomNumber[Math.floor(Math.random() * (2 - 0)) + 0]]];\n      }\n    }\n  }\n\n  slipToRight() {\n    let newArr = this.state.gridStateMap;\n    let buffer = 3;\n\n    for (let col = 0; col < this.state.gridStateMap.length; col++) {\n      buffer = 3;\n\n      for (let row = 2; row >= 0; row--) {\n        if (newArr[col][row] != 0) {\n          for (let i = row; i < buffer; i++) {\n            if (newArr[col][i] == newArr[col][i + 1]) {\n              newArr[col][i + 1] = newArr[col][i + 1] + newArr[col][i];\n              newArr[col][i] = 0;\n              buffer--;\n            } else if (newArr[col][i] != newArr[col][i + 1] && newArr[col][i + 1] != 0) {\n              buffer--;\n            } else {\n              newArr[col][i + 1] = newArr[col][i];\n              newArr[col][i] = 0;\n            }\n          }\n        }\n      }\n    }\n\n    this.setState({\n      newArr\n    });\n    this.createGridCell(1);\n  }\n\n  slipToLeft() {\n    let newArr = this.state.gridStateMap;\n    let buffer = 0;\n\n    for (let col = 0; col < this.state.gridStateMap.length; col++) {\n      buffer = 0;\n\n      for (let row = 0; row <= 3; row++) {\n        if (newArr[col][row] != 0) {\n          for (let i = row; i > buffer; i--) {\n            if (newArr[col][i] == newArr[col][i - 1]) {\n              newArr[col][i - 1] = newArr[col][i - 1] + newArr[col][i];\n              newArr[col][i] = 0;\n              buffer++;\n              this.setState({\n                newArr\n              });\n            } else if (newArr[col][i] != newArr[col][i - 1] && newArr[col][i - 1] != 0) {\n              buffer++;\n            } else {\n              newArr[col][i - 1] = newArr[col][i];\n              newArr[col][i] = 0;\n              this.setState({\n                newArr\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.createGridCell(1);\n  }\n\n  slipToTop() {\n    let newArr = this.state.gridStateMap;\n    let buffer = 0;\n\n    for (let row = this.state.gridStateMap.length - 1; row >= 0; row--) {\n      buffer = 0;\n\n      for (let col = 0; col <= this.state.gridStateMap.length - 1; col++) {\n        if (newArr[col][row] != 0) {\n          for (let i = col; i > buffer; i--) {\n            if (newArr[i][row] == newArr[i - 1][row]) {\n              newArr[i - 1][row] = newArr[i - 1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer++;\n              this.setState({\n                newArr\n              });\n            } else if (newArr[i][row] != newArr[i - 1][row] && newArr[i - 1][row] != 0) {\n              buffer++;\n            } else {\n              newArr[i - 1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({\n                newArr\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.createGridCell(1);\n  }\n\n  slipToBottom() {\n    let newArr = this.state.gridStateMap;\n    let buffer = 3;\n\n    for (let row = this.state.gridStateMap.length - 1; row >= 0; row--) {\n      buffer = 3;\n\n      for (let col = this.state.gridStateMap.length - 1; col >= 0; col--) {\n        if (newArr[col][row] != 0) {\n          for (let i = col; i < buffer; i++) {\n            if (newArr[i][row] == newArr[i + 1][row]) {\n              newArr[i + 1][row] = newArr[i + 1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer--;\n              this.setState({\n                newArr\n              });\n            } else if (newArr[i][row] != newArr[i + 1][row] && newArr[i + 1][row] != 0) {\n              buffer--;\n            } else {\n              newArr[i + 1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({\n                newArr\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.createGridCell(1);\n  }\n\n  isSameIndex(col, row) {\n    if (this.state.gridStateMap[col][row] != 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  changeStateMap(value, column, row) {\n    let newArr = [];\n\n    for (let col = 0; col < this.state.gridStateMap.length; col++) {\n      for (let row = 0; row < this.state.gridStateMap[col].length; row++) {\n        newArr.push();\n      }\n    }\n\n    this.setState({\n      gridStateMap: newArr\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      onKeyPress: this.slideGridCell,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameBox\",\n        children: this.state.gridStateMap.map(() => {})\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/burakyapici/Desktop/clone-project1-2048/src/App.js"],"names":["React","GridRow","App","Component","constructor","state","gridStateMap","createGridCell","self","window","addEventListener","e","key","slipToRight","console","log","slipToLeft","slipToTop","slipToBottom","cellAmount","newArr","randomNumbersArr","mapIsEmpty","i","createRandomNumber","setState","col","length","row","minValue","maxValue","randomCol","randomRow","randomNumber","Math","floor","random","isSameIndex","buffer","changeStateMap","value","column","push","render","slideGridCell","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'animate.css';\nimport GridRow from './components/GridRow'\n\nexport default class App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      gridStateMap: [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ],\n    };\n    this.createGridCell(2);\n    const self = this;\n    window.addEventListener('keydown', function(e){\n      if(e.key == \"ArrowRight\"){\n        self.slipToRight();\n        console.log(\"hello\");\n      }else if(e.key == \"ArrowLeft\"){\n        self.slipToLeft();\n      }else if(e.key == \"ArrowUp\"){\n        self.slipToTop();\n      }else if(e.key == \"ArrowDown\"){\n        self.slipToBottom();\n      }\n    });\n  }\n\n  createGridCell(cellAmount){\n    let newArr = this.state.gridStateMap;\n    let randomNumbersArr = [];\n    if(this.mapIsEmpty()){\n      for(let i = 1; i <= cellAmount; i++){\n        randomNumbersArr = this.createRandomNumber(0,4);\n        newArr[randomNumbersArr[0][0]][randomNumbersArr[0][1]] = randomNumbersArr[1][0];\n      }\n      this.setState({gridStateMap: newArr,});\n    }\n  }\n\n  mapIsEmpty(){\n    for(let col = 0; col < this.state.gridStateMap.length; col++){\n      for(let row = 0; row < this.state.gridStateMap[col].length; row++){\n        if(this.state.gridStateMap[col][row] == 0){\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  createRandomNumber(minValue, maxValue){\n    let randomCol = 0, randomRow = 0;\n    let randomNumber = [2, 4];\n    for(;;){\n      randomCol = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n      randomRow = Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n      if(!this.isSameIndex(randomCol, randomRow)){\n        return [[randomCol, randomRow], [randomNumber[Math.floor(Math.random() * (2 - 0)) + 0]]];\n      }\n    }\n  }\n\n  slipToRight(){\n    let newArr = this.state.gridStateMap;\n    let buffer = 3;\n    for(let col = 0; col < this.state.gridStateMap.length; col++){\n      buffer = 3;\n      for(let row = 2; row >= 0; row--){        \n        if(newArr[col][row] != 0){\n          for(let i = row; i < buffer; i++){\n            if(newArr[col][i] == newArr[col][i + 1]){\n              newArr[col][i + 1] = newArr[col][i + 1] + newArr[col][i];\n              newArr[col][i] = 0;\n              buffer--;\n            }else if( ( newArr[col][i] != newArr[col][i + 1] ) && ( newArr[col][i + 1] != 0 ) ){\n              buffer--;\n            }else{\n              newArr[col][i+1] = newArr[col][i];\n              newArr[col][i] = 0;\n              \n            }\n          } \n        }\n      }\n    }\n    this.setState({newArr});\n    this.createGridCell(1);\n  }\n\n  slipToLeft(){\n    let newArr = this.state.gridStateMap;\n    let buffer = 0;\n    for(let col = 0; col < this.state.gridStateMap.length; col++){\n      buffer = 0;\n      for(let row = 0; row <= 3; row++){        \n        if(newArr[col][row] != 0){\n          for(let i = row; i > buffer; i--){\n            if(newArr[col][i] == newArr[col][i - 1]){\n              newArr[col][i - 1] = newArr[col][i - 1] + newArr[col][i];\n              newArr[col][i] = 0;\n              buffer++;\n              this.setState({newArr});\n            }else if( ( newArr[col][i] != newArr[col][i - 1] ) && ( newArr[col][i - 1] != 0 ) ){\n              buffer++;\n            }else{\n              newArr[col][i - 1] = newArr[col][i];\n              newArr[col][i] = 0;\n              this.setState({newArr});\n            }\n          } \n        }\n      }\n    }\n    this.createGridCell(1);\n  }\n\n  slipToTop(){\n    let newArr = this.state.gridStateMap;\n    let buffer = 0;\n    for(let row = this.state.gridStateMap.length - 1; row >= 0; row--){\n      buffer = 0;\n      for(let col = 0; col <= this.state.gridStateMap.length -1; col++){\n        if(newArr[col][row] != 0){\n          for(let i = col; i > buffer; i--){\n            if(newArr[i][row] == newArr[i-1][row]){\n              newArr[i - 1][row] = newArr[i -1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer++;\n              this.setState({newArr});\n            }else if( ( newArr[i][row] != newArr[i-1][row] ) && ( newArr[i-1][row] != 0 ) ){\n              buffer++;\n            }else{\n              newArr[i-1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({newArr});\n            }\n          } \n        }\n      }\n    }\n    this.createGridCell(1);\n  }\n\n  slipToBottom(){\n    let newArr = this.state.gridStateMap;\n    let buffer = 3;\n    for(let row = this.state.gridStateMap.length - 1; row >= 0; row--){\n      buffer = 3;\n      for(let col = this.state.gridStateMap.length-1; col >= 0; col--){\n        if(newArr[col][row] != 0){\n          for(let i = col; i < buffer; i++){\n            if(newArr[i][row] == newArr[i+1][row]){\n              newArr[i + 1][row] = newArr[i +1][row] + newArr[i][row];\n              newArr[i][row] = 0;\n              buffer--;\n              this.setState({newArr});\n            }else if( ( newArr[i][row] != newArr[i+1][row] ) && ( newArr[i+1][row] != 0 ) ){\n              buffer--;\n            }else{\n              newArr[i+1][row] = newArr[i][row];\n              newArr[i][row] = 0;\n              this.setState({newArr});\n            }\n          } \n        }\n      }\n    }\n    this.createGridCell(1);\n  }\n\n\n  isSameIndex(col, row){\n    if(this.state.gridStateMap[col][row] != 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n\n  changeStateMap(value, column, row){\n    let newArr = [];\n    for(let col = 0; col < this.state.gridStateMap.length; col++){\n        for(let row = 0; row < this.state.gridStateMap[col].length; row++){\n          newArr.push();\n        }\n    }\n    this.setState({\n      gridStateMap: newArr,\n    });\n  }\n  render(){\n    return(\n      <div className=\"game-container\" onKeyPress={this.slideGridCell}>\n        <div className=\"gameBox\">\n          {this.state.gridStateMap.map( () => {\n            \n          })}\n        </div>\n       </div>  \n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}